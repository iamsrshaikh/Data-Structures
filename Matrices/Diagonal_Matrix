#include<iostream>

using namespace std;

class Diagonal{
private:
    int n;
    int *A;
public:

    Diagonal(){  //minimum dimension
        n=2;
        A=new int[2];
    }
    Diagonal(int n){
        this->n=n;
        A=new int[n];
    }
    
    void set(int i,int j,int x);
    int get(int i,int j);
    void display();
    
    ~Diagonal(){
        delete []A;
    }
    
    
    
};

void Diagonal::set(int i,int j,int x){
    if(i==j){
        A[i-1]=x;
    }
}

int Diagonal::get(int i,int j){
    if(i==j){
        return A[i-1];
    }
    else
        return 0;
}

void Diagonal::display(){
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(i==j){
                cout<<A[i-1]<<" ";
            }
            else
                cout<<"0"<<" ";
        }
        cout<<endl;
    }
}
int main(){
    int d;
    int x;
    cout<<"Enter dimension of matrix: ";
    cin>>d;
    
    Diagonal dm(d);
    
    cout<<"Enter diagonal Elements: "<<endl;
    
    
    for(int i=1;i<=d;i++){
        for(int j=1;j<=d;j++){
            if(i==j){
                cin>>x;
                dm.set(i,j,x);
            }
            
        }
    }
    
    dm.display();
    cout<<endl;
    cout<<"Enter the dimension number: "<<endl;
    cin>>d;
    
    int p=dm.get(d,d);
    cout<<"Number: "<<p<<endl;
    
    return 0;
}
