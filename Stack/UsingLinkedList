#include<iostream>

using namespace std;

class Node{
public:
    int data;
    Node *next;
};

class Stack{
private:
     Node *top;
    
public:
    Stack();
    ~Stack();
    int push(int x);
    int pop();
    void display();
    int peek(int index);
    int StackTop();
    int isEmpty();
    int isFull();

};

Stack::Stack() {
    top = nullptr;
}
 
Stack::~Stack() {
    Node* p = top;
    while (top){
        top = top->next;
        delete p;
        p = top;
    }
}



int Stack::push(int x){
    Node *t=new Node;
    if(t==NULL)
        return 0;
    else{
        t->data=x;
        t->next=top;
        top=t;
    }
    return x;
}

int Stack::pop(){
    Node *p;
    int x=-1;
    if(top==NULL)
        return -1;
    else{
        p=top;
        top=top->next;
        x=p->data;
        delete p;
    }
    return x;
}

void Stack::display(){
    Node *p=top;
    if(p==NULL)
        cout<<"Nothing to display!"<<endl;
    while(p!=NULL){
        cout<<p->data<<" | "<<flush;
        p=p->next;
    }
    cout<<endl;
}

int Stack::StackTop(){
    if(top)
        return top->data;
    else
        return -1;
}

int Stack::isEmpty(){
    if(top==NULL)
        return 1;
    else
        return 0;
}

int Stack::isFull(){
    Node *t=new Node;
    int r=t ? 1:0;
    delete t;
    return r;
}

int Stack::peek(int index){
    int i;
    Node *p=top;
    for(i=0;p!=NULL && i<index-1;i++)
        p=p->next;
    if(p!=NULL)
        return p->data;
    else
        return -1;
}

int main(){
    
    Stack stk;
    int choice;
    int temp,p,f,e,t,n;
    
    do{
        cout<<"**************Operations************"<<endl;
        cout<<"0. Exit"<<endl;
        cout<<"1. Push"<<endl;
        cout<<"2. Display"<<endl;
        cout<<"3. Pop"<<endl;
        cout<<"4. Peek"<<endl;
        cout<<"5. Is Full"<<endl;
        cout<<"6. Is Empty"<<endl;
        cout<<"7. Stack Top"<<endl;
        
        cout<<"Enter your choice: "<<endl;
        cin>>choice;
        
        switch(choice){
            case 0:
            break;
        
            case 1:
            cout<<"Enter the element to insert: ";
            cin>>temp;
            n=stk.push(temp);
            if(n==0)
                cout<<"Stack is FULL"<<endl;
            else{
                cout<<n<<" inserted"<<endl;
            }
            
            break;
            
            case 2:
            
            cout<<"Stack Elements: "<<endl;
            stk.display();
            cout<<endl;
            break;
            
            case 3:
            temp=stk.pop();
            if(temp==0)
                cout<<"Stack is Empty"<<endl;
            else{
                cout<<"Element deleted: "<<temp<<endl;
                
            }
            break;
            
            case 4:
            cout<<"Enter the position: ";
            cin>>p;
            cout<<"Element: "<<stk.peek(p)<<endl;
            break;
            
            case 5:
            f=stk.isFull();
            if(f==0)
                cout<<"Stack is Full"<<endl;
            else
                cout<<"Stack is not Full"<<endl;
            break;
            
            case 6:
            e=stk.isEmpty();
            if(e==1)
                cout<<"Stack is Empty"<<endl;
            else
                cout<<"Stack is not Empty"<<endl;
            break;
                
            case 7:
            t=stk.StackTop();
            if(t==-1)
                cout<<"Stack is Empty"<<endl;
            else
                cout<<"Top of Stack: "<<t<<endl;
            break;
                
            default:
            cout<<"Pls enter valid choice!"<<endl;
        }
    }while(choice!=0);
    
    
    return 0;
}
