#include <iostream>
using namespace std;
 
class Stack{
private:
    int size;
    int top;
    int *S;
public:
    Stack(int size);
    ~Stack();
    int push(int x);
    int pop();
    int peek(int index);
    int isFull();
    int isEmpty();
    void display();
    int stackTop();
};
 
Stack::Stack(int size) {
    this->size = size;
    top = -1;
    S = new int[size];
}
 
Stack::~Stack() {
    delete[] S;
}
 
int Stack::push(int x) {
    if (isFull()){
        return 0;
    } else {
        top++;
        S[top] = x;
    }
    return x;
}
 
int Stack::pop() {
    int x = 1;
    if (isEmpty()){
        return 0;
    } else {
        x = S[top];
        top--;
    }
    return x;
}
 
int Stack::peek(int index) {
    int x = -1;
    if (top-index+1 < 0 || top-index+1 == size){
        cout << "Invalid position!" << endl;
    } else {
        x = S[top-index+1];
    }
    return x;
}
 
int Stack::isFull() {
    if (top == size-1){
        return 1;
    }
    return 0;
}
 
int Stack::isEmpty() {
    if (top == -1){
        return 1;
    }
    return 0;
}
 
void Stack::display() {
    for (int i=top; i>=0; i--){
        cout << S[i] << " | " << flush;
    }
    cout << endl;
}
 
int Stack::stackTop() {
    if (isEmpty()){
        return -1;
    }
    return S[top];
}
 



int main(){
    int sz;
    cout<<"Enter the size of Array: "<<endl;
    cin>>sz;
    
    Stack stk(sz);
    int choice;
    int temp,p,f,e,t,n;
    
    do{
        cout<<"**************Operations************"<<endl;
        cout<<"0. Exit"<<endl;
        cout<<"1. Push"<<endl;
        cout<<"2. Display"<<endl;
        cout<<"3. Pop"<<endl;
        cout<<"4. Peek"<<endl;
        cout<<"5. Is Full"<<endl;
        cout<<"6. Is Empty"<<endl;
        cout<<"7. Stack Top"<<endl;
        
        cout<<"Enter your choice: "<<endl;
        cin>>choice;
        
        switch(choice){
            case 0:
            break;
        
            case 1:
            cout<<"Enter the element to insert: ";
            cin>>temp;
            n=stk.push(temp);
            if(n==0)
                cout<<"Stack is FULL"<<endl;
            else{
                cout<<n<<" inserted"<<endl;
            }
            
            break;
            
            case 2:
            cout<<"Stack Elements: "<<endl;
            stk.display();
            cout<<endl;
            break;
            
            case 3:
            temp=stk.pop();
            if(temp==0)
                cout<<"Stack is Empty"<<endl;
            else{
                cout<<"Element deleted: "<<temp<<endl;
                
            }
            break;
            
            case 4:
            cout<<"Enter the position: ";
            cin>>p;
            cout<<"Element: "<<stk.peek(p)<<endl;
            break;
            
            case 5:
            f=stk.isFull();
            if(f==1)
                cout<<"Stack is Full"<<endl;
            else
                cout<<"Stack is not Full"<<endl;
            break;
            
            case 6:
            e=stk.isEmpty();
            if(e==1)
                cout<<"Stack is Empty"<<endl;
            else
                cout<<"Stack is not Empty"<<endl;
            break;
                
            case 7:
            t=stk.stackTop();
            if(t==-1)
                cout<<"Stack is Empty"<<endl;
            else
                cout<<"Top of Stack: "<<t<<endl;
            break;
                
            default:
            cout<<"Pls enter valid choice!"<<endl;
        }
    }while(choice!=0);
    
    return 0;
}
