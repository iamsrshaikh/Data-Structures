#include<iostream>
#include<string>

using namespace std;

class Array{
private:
    int *A;
    int length;
    int size;
    void swap(int *x,int *y);
public:
    Array(){
        size=10;
        length=0;
        A=new int[size];
    }
    Array(int sz){
        size=sz;
        length=0;
        A=new int[sz];
    }
    
    ~Array(){
        delete []A;
    }
    
    void display();
    void insert(int index,int x);
    void append(int x);
    int Delete(int x);
    int LinearSearch(int key);
    int BinarySearch(int key);
    int get(int index);
    void set(int index,int key);
    int Max();
    int Min();
    int Sum();
    float Avg();
    void Reverse();
    void Reverse2();
    void InsertSort(int x);
    int isSorted();
    void Rearrange();
    Array* Merge(Array arr2);
    Array* Union(Array arr2);
    Array* Diff(Array arr2);
    Array* Inter(Array arr2);
        
};

void Array::display(){
    int i;
    cout<<"Elements of the Array are: "<<endl;
    for( i=0;i<length;i++){
        cout<<A[i]<<" ";
    }
    cout<<endl;
}

void Array::append(int x){
    if(length<size){
        A[length++]=x;
    }
    cout<<x<<" inserted at last"<<endl;
}

void Array::insert(int index,int x){
    int i;
    if(index>=0 && index<=length){
        for(i=length;i>index;i--){
        A[i]=A[i-1];
    }
    A[index]=x;
    length++;
        
    }
    
    
}

int Array::Delete(int index){
    int x=0;
    int i;
    if(index>=0 && index<=length){
        x=A[index];
        for(i=index;i<length-1;i++){
            A[i]=A[i+1];
        }
        length--;
        return x;
    }
}

void Array::swap(int *x,int *y){
    int temp;
    temp=*x;
    *x=*y;
    *y=temp;
}

int Array::LinearSearch(int key){
    int i;
    for(i=0;i<length;i++){
        if(key==A[i]){
            swap(&A[i],&A[0]);
            return i;
        }
    }
    return -1;
}

int Array::BinarySearch(int key){
    int l,h,mid;
    l=0;
    h=length-1;
    while(l<=h){
        mid=(l+h)/2;
        if(key==A[mid])
            return mid;
        else if(key<A[mid])
            h=mid-1;
        else
            l=mid+1;
        
    }
    return -1;
    
}

int Array::get(int index){
    if(index>=0 && index<length)
        return A[index];
    return -1;
}

void Array::set(int index,int x){
    if(index>=0 && index<length)
        A[index]=x;
}

int Array::Max(){
    int max=A[0];
    int i;
    for(i=0;i<length;i++){
        if(A[i]>max)
            max=A[i];
    }
    return max;
}

int Array::Min(){
    int min=A[0];
    int i;
    for(i=0;i<length;i++){
        if(A[i]<min)
            min=A[i];
    }
    return min;
}

int Array::Sum(){
    int i;
    int s=0;
    for(i=0;i<length;i++){
        s+=A[i];
    }
    return s;
}

float Array::Avg(){
    return (float)Sum()/length;
}

void Array::Reverse(){
    int *B;
    B= new int[size];
    int i,j;
    for(i=length-1,j=0;i>=0;i--,j++){
        B[j]=A[i];
    }
    for(i=0;i<length;i++){
        A[i]=B[i];
    }
}

void Array::Reverse2(){
    int i,j;
    for(i=0,j=length-1;i<j;i++,j--){
        swap(&A[i],&A[j]);
    }
}

void Array::InsertSort(int x){
    int i;
    i=length-1;
    while(A[i]>x){
        A[i+1]=A[i];
        i--;
    }
    A[i+1]=x;
    length++;
}

int Array::isSorted(){
    int i;
    for(i=0;i<length;i++){
        
    }
}

void Array::Rearrange(){
    int i,j;
    i=0;
    j= length-1;

    while(i<j){
        while( A[i]<0)i++;
        while( A[j]>=0)j--;
        if(i<j)
            swap(& A[i],& A[j]);
    }
}

Array* Array::Merge(Array arr2){
    int i,j,k;
    i=j=k=0;
    Array *arr3=new Array(length+arr2.length);
    while(i<length && j<arr2.length){
        if(A[i]<arr2.A[j]){
            arr3->A[k++]=A[i++];
        }
        else{
            arr3->A[k++]=arr2.A[j++];
        }
    } 
    for(;i<length;i++)
        arr3->A[k++]=A[i];
    for(;j<arr2.length;j++)
        arr3->A[k++]=arr2.A[j++];
    arr3->length=length+arr2.length;
    return arr3;
}

Array* Array::Union(Array arr2){
    int i,j,k;
    i=j=k=0;
    Array *arr3=new Array(length+arr2.length);
    while(i<length && j<arr2.length){
        if(A[i]<arr2.A[j]){
            arr3->A[k++]=A[i++];
        }
        else if(arr2.A[j]<A[i])
            arr3->A[k++]=arr2.A[j++];
        else{
            arr3->A[k++]=A[i++];
            j++;
        }
    } 
    for(;i<length;i++)
        arr3->A[k++]=A[i];
    for(;j<arr2.length;j++)
        arr3->A[k++]=arr2.A[j++];
    arr3->length=k;
    return arr3;
    
}

Array* Array::Inter(Array arr2){
    int i,j,k;
    i=j=k=0;
    Array *arr3=new Array(length+arr2.length);
    while(i<length && j<arr2.length){
        if(A[i]<arr2.A[j]){
            i++;
        }
        else if(arr2.A[j]<A[i])
            j++;
        else{
            arr3->A[k++]=A[i++];
            j++;
        }
    } 
    arr3->length=k;
    return arr3;
    
}

Array* Array::Diff(Array arr2){
    int i,j,k;
    i=j=k=0;
    Array *arr3=new Array(length+arr2.length);
    while(i<length && j<arr2.length){
        if(A[i]<arr2.A[j]){
            arr3->A[k++]=A[i];
        }
        else if(arr2.A[j]<A[i])
            j++;
        else{
            i++;
            j++;
        }
    } 
    arr3->length=k;
    return arr3;
    
}




int main(){
    Array *arr1;
    int ch,sz;
    int x,index;
    cout<<"Enter the size of array: "<<endl;
    cin>>sz;
    arr1=new Array(sz);
    do{
        cout<<"\nMenu"<<endl;
        cout<<"1. Insert"<<endl;
        cout<<"2. Delete"<<endl;
        cout<<"3. LinearSearch"<<endl;
        cout<<"4. Binary Search"<<endl;
        cout<<"5. Sum"<<endl;
        cout<<"6. Reverse"<<endl;
        cout<<"7. Display"<<endl;
        cout<<"8. Exit"<<endl;
        cout<<"Enter your choice: "<<endl;
        cin>>ch;
        
        switch(ch){
            case 1: 
            cout<<"Enter the element and index"<<endl;
            cin>>x>>index;
            arr1->insert(index,x);
            break;
            
            case 2:
            cout<<"Enter the index"<<endl;
            cin>>index;
            arr1->Delete(x);
            cout<<"Deleted element: "<<x<<endl;
            break;
            
            case 3:
            cout<<"Enter the element to search"<<endl;
            cin>>x;
            arr1->LinearSearch(x);
            cout<<"Element is found "<<index;
            break;
            
            case 4:
            cout<<"Enter the element to search"<<endl;
            cin>>x;
            arr1->BinarySearch(x);
            cout<<"Element index "<<index;
            break;
            
            case 5:
            cout<<"Sum of Array: "<<arr1->Sum();
            break;
            
            case 6:
            cout<<"Reverse of Array: "<<endl;
            arr1->Reverse();
            
            break;
            
            case 7:
            arr1->display();
            
            
            
            
            
        }
        
        
    }while(ch<8);
    
    
    
    
    return 0;
}
